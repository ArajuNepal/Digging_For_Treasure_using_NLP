ggsave("visualisations/common_additional_stopwords_visualisation.eps", plot = common_additional_stopwords_visualisation, width = 4, height = 4, dpi = 300)
# Treasure Island unigrams wordcloud
treasure_island_wordcloud <- ggplot(treasure_island_unigram_top, aes(label = word, size = n, color = color_group)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20, trans = power_trans(1/.7)) +
scale_color_manual(values = c("group1" = "#c06f6f",
"group2" = "#7a1e47",
"group3" = "#4c1c29")) +
theme_minimal() +
theme(legend.position = "none")
treasure_island_wordcloud
# Treasure Island unigrams wordcloud
treasure_island_wordcloud <- ggplot(treasure_island_unigram_top, aes(label = word, size = n, color = color_group)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20, trans = power_trans(1/.7)) +
scale_color_manual(values = c("group1" = "#c8775d",
"group2" = "#7a1e47",
"group3" = "#4c1c29")) +
theme_minimal() +
theme(legend.position = "none")
treasure_island_wordcloud
# Treasure Island unigrams wordcloud
treasure_island_wordcloud <- ggplot(treasure_island_unigram_top, aes(label = word, size = n, color = color_group)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20, trans = power_trans(1/.7)) +
scale_color_manual(values = c("group1" = "#c8775d",
"group2" = "#e98959",
"group3" = "#b47c64")) +
theme_minimal() +
theme(legend.position = "none")
treasure_island_wordcloud
# Treasure Island unigrams wordcloud
treasure_island_wordcloud <- ggplot(treasure_island_unigram_top, aes(label = word, size = n, color = color_group)) +
geom_text_wordcloud() +
scale_size_area(max_size = 15, trans = power_trans(1/.7)) +
scale_color_manual(values = c("group1" = "#c8775d",
"group2" = "#e98959",
"group3" = "#b47c64")) +
theme_minimal() +
theme(legend.position = "none")
treasure_island_wordcloud
# Treasure Island unigrams wordcloud
treasure_island_wordcloud <- ggplot(treasure_island_unigram_top, aes(label = word, size = n, color = color_group)) +
geom_text_wordcloud() +
scale_size_area(max_size = 15, trans = power_trans(1/.7)) +
scale_color_manual(values = c("group1" = "#c8775d",
"group2" = "#866042",
"group3" = "#b47c64")) +
theme_minimal() +
theme(legend.position = "none")
treasure_island_wordcloud
# Treasure Island unigrams wordcloud
treasure_island_wordcloud <- ggplot(treasure_island_unigram_top, aes(label = word, size = n, color = color_group)) +
geom_text_wordcloud() +
scale_size_area(max_size = 15, trans = power_trans(1/.7)) +
scale_color_manual(values = c("group1" = "#c8775d",
"group2" = "#866042",
"group3" = "#bd701e")) +
theme_minimal() +
theme(legend.position = "none")
treasure_island_wordcloud
# Treasure Island unigrams wordcloud
treasure_island_wordcloud <- ggplot(treasure_island_unigram_top, aes(label = word, size = n, color = color_group)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20, trans = power_trans(1/.7)) +
scale_color_manual(values = c("group1" = "#c8775d",
"group2" = "#866042",
"group3" = "#bd701e")) +
theme_minimal() +
theme(legend.position = "none")
treasure_island_wordcloud
ggsave("visualisations/treasure_island_wordcloud.eps", plot = treasure_island_wordcloud, width = 4, height = 5, dpi = 300)
ggsave("visualisations/treasure_island_wordcloud.eps", plot = treasure_island_wordcloud, width = 6, height = 4, dpi = 300)
ggsave("visualisations/treasure_island_wordcloud.eps", plot = treasure_island_wordcloud, width = 5, height = 4, dpi = 300)
treasure_island_no_characters_wordcloud <- ggplot(head(treasure_island_unigram_no_characters, 50), aes(label = word, size = n, color = color_group)) +  # the value 3 is the number of colors used in the wordcloud
geom_text_wordcloud() +
scale_size_area(max_size = 20, trans = power_trans(1/.7)) +
scale_color_manual(values = c("group1" = "#c8775d",
"group2" = "#866042",
"group3" = "#bd701e")) +
theme_minimal()
treasure_island_no_characters_wordcloud
ggsave("visualisations/treasure_island_no_characters_wordcloud.eps", plot = treasure_island_no_characters_wordcloud, width = 5, height = 4, dpi = 300)
# Treasure Island unigrams wordcloud
treasure_island_wordcloud <- ggplot(treasure_island_unigram_top, aes(label = word, size = n, color = color_group)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20, trans = power_trans(1/.7)) +
scale_color_manual(values = c("group1" = "#c8775d",
"group2" = "#866042",
"group3" = "#bd701e")) +
theme_minimal() +
theme(legend.position = "none")
treasure_island_wordcloud
ggsave("visualisations/treasure_island_wordcloud.eps", plot = treasure_island_wordcloud, width = 5, height = 4, dpi = 300)
ggsave("visualisations/treasure_island_wordcloud.eps", plot = treasure_island_wordcloud, width = 6, height = 4, dpi = 300)
ggsave("visualisations/treasure_island_wordcloud.eps", plot = treasure_island_wordcloud, width = 5, height = 4, dpi = 300)
ggsave("visualisations/treasure_island_wordcloud.eps", plot = treasure_island_wordcloud, width = 5, height = 5, dpi = 300)
ggsave("visualisations/treasure_island_no_characters_wordcloud.eps", plot = treasure_island_no_characters_wordcloud, width = 5, height = 5, dpi = 300)
ggsave("visualisations/treasure_island_wordcloud.eps", plot = treasure_island_wordcloud, width = 5, height = 4.5, dpi = 300)
ggsave("visualisations/treasure_island_no_characters_wordcloud.eps", plot = treasure_island_no_characters_wordcloud, width = 5, height = 4.5, dpi = 300)
# Catriona unigrams wordcloud
catriona_wordcloud <- ggplot(head(catriona_unigram_top, 50), aes(label = word, size = n, color = color_group)) +  # the value 3 is the number of colors used in the wordcloud
geom_text_wordcloud() +
scale_size_area(max_size = 20, trans = power_trans(1/.7)) +
scale_color_manual(values = c("group1" = "#657b9e",
"group2" = "#5e93cf",
"group3" = "#223692")) +
theme_minimal()
catriona_wordcloud
## Removing character names ----
treasure_island_without_characters_unigrams <- treasure_island_unigram %>%
filter(!word %in% c('jim', 'hawkins', 'billy', 'bones','black','dog', 'squire', 'trelawney','doctor', 'livesey','captain', 'smollett',
'john', 'silver','ben', 'gunn','pew','israel', 'hands','flint','tom', 'redruth', 'george','merry')) %>% arrange(desc(n))
catriona_without_characters_unigrams <- catriona_unigram %>%
filter(!word %in% c('david','balfour','alan','breck','stewart','lord','william','grant','prestongrange',
'james','glens','macgregor','drummond','duke','argyll','simon','fraser','prophet',
'peden','hugh','palliser')) %>% arrange(desc(n))
## Wordclouds after removing character names ----
# Treasure Island unigrams without characters
treasure_island_unigram_no_characters <- head(treasure_island_without_characters_unigrams, 50) %>%
mutate(color_group = rep(c("group1", "group2", "group3"), length.out = n()))
treasure_island_no_characters_wordcloud <- ggplot(head(treasure_island_unigram_no_characters, 50), aes(label = word, size = n, color = color_group)) +  # the value 3 is the number of colors used in the wordcloud
geom_text_wordcloud() +
scale_size_area(max_size = 20, trans = power_trans(1/.7)) +
scale_color_manual(values = c("group1" = "#c8775d",
"group2" = "#866042",
"group3" = "#bd701e")) +
theme_minimal()
treasure_island_no_characters_wordcloud
# Catriona unigrams without characters
catriona_unigram_no_characters <- head(catriona_without_characters_unigrams, 50) %>%
mutate(color_group = rep(c("group1", "group2", "group3"), length.out = n()))
catriona_no_characters_wordcloud <- ggplot(head(catriona_unigram_no_characters, 50), aes(label = word, size = n, color = color_group)) +  # the value 3 is the number of colors used in the wordcloud
geom_text_wordcloud() +
scale_size_area(max_size = 20, trans = power_trans(1/.7)) +
scale_color_manual(values = c("group1" = "#657b9e",
"group2" = "#5e93cf",
"group3" = "#223692")) +
theme_minimal()
## Bigrams ----
bigrams <- cleaned_set %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2) %>%
filter(!is.na(bigram)) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
mutate(word1 = lemmatize_words(word1), word2 = lemmatize_words(word2)) %>%
filter(!(word1 %in% final_stopwords_set$word), !(word2 %in% final_stopwords_set$word)) %>%
count(word1, word2, book, sort = TRUE)
# Separate and united bigrams for each book
bigrams_treasure_island <- bigrams %>%
filter(book == "Treasure Island")
bigrams_treasure_island_united <- bigrams_treasure_island %>%
unite(bigram, word1, word2, sep = " ")
bigrams_catriona <- bigrams %>%
filter(book == "Catriona")
bigrams_catriona_united <- bigrams_catriona %>%
unite(bigram, word1, word2, sep = " ")
# Treasure Island bigrams wordcloud
treasure_island_bigrams <- head(bigrams_treasure_island_united, 50) %>%
mutate(color_group = rep(c("group1", "group2", "group3"), length.out = n()))
treasure_island_bigrams_wordcloud <- ggplot(treasure_island_bigrams, aes(label = bigram, size = n, color = color_group)) +  # the value 3 is the number of colors used in the wordcloud
geom_text_wordcloud() +
scale_size_area(max_size = 20, trans = power_trans(1/.7)) +
scale_color_manual(values = c("group1" = "#c8775d",
"group2" = "#866042",
"group3" = "#bd701e")) +
theme_minimal()
# Catriona bigrams wordcloud
catriona_bigrams <- head(bigrams_catriona_united, 50) %>%
mutate(color_group = rep(c("group1", "group2", "group3"), length.out = n()))
catriona_bigrams_wordcloud <- ggplot(catriona_bigrams, aes(label = bigram, size = n, color = color_group)) +  # the value 3 is the number of colors used in the wordcloud
geom_text_wordcloud() +
scale_size_area(max_size = 20, trans = power_trans(1/.7)) +
scale_color_manual(values = c("group1" = "#657b9e",
"group2" = "#5e93cf",
"group3" = "#223692")) +
theme_minimal()
# Removing character names from bigrams
bigrams_without_characters <- bigrams %>%
filter(
!word1 %in% c('jim', 'hawkins', 'billy', 'bones','bone', 'black','dog', 'squire', 'trelawney','doctor', 'livesey','captain', 'smollett','tom','morgan','benjamin',
'abraham','hands','hand','redruth','bill','anderson','john', 'silver','ben', 'gunn','pew','israel', 'hands','flint','tom', 'redruth', 'george','merry') &
!word2 %in% c('jim', 'hawkins', 'billy', 'bones','bone', 'black','dog', 'squire', 'trelawney','doctor', 'livesey','captain', 'smollett','tom','morgan','benjamin',
'abraham','hands','hand','redruth','bill','anderson','john', 'silver','ben', 'gunn','pew','israel', 'hands','flint','tom', 'redruth', 'george','merry') &
!word1 %in% c('david','balfour','alan','breck','stewart','lord','william','grant','prestongrange','captain','sing','grant','sang','advocate','tod','lapraik',
'miller','sheriff','tam','dale','charles','james','glens','macgregor','drummond','duke','argyll','simon','fraser','prophet','george','grange','allardyce',
'barbara','catriona','charlie','andie','alison','annie','dauvit','robin','campbell', 'peden','hugh','palliser') &
!word2 %in% c('david','balfour','alan','breck','stewart','lord','william','grant','prestongrange','captain','sing','grant','sang','advocate','tod','lapraik',
'miller','sheriff','tam','dale','charles','james','glens','macgregor','drummond','duke','argyll','simon','fraser','prophet','george','grange','allardyce',
'barbara','catriona','charlie','andie','alison','annie','dauvit','robin','campbell', 'peden','hugh','palliser')
)
# Separating bigrams set for each book
bigrams_treasure_island_without_characters <- bigrams_without_characters %>%
filter(book == "Treasure Island") %>%
unite(bigram, word1, word2, sep = " ")
bigrams_catriona_without_characters <- bigrams_without_characters %>%
filter(book == "Catriona") %>%
filter(!word1 %in% c('1','2','3','4','5')) %>%
unite(bigram, word1, word2, sep = " ")
# Wordcloud for bigrams without character names
# For Treasure Island
treasure_island_bigrams_no_characters <- head(bigrams_treasure_island_without_characters, 50) %>%
mutate(color_group = rep(c("group1", "group2", "group3"), length.out = n()))
treasure_island_bigrams_no_characters_wordcloud <- ggplot(treasure_island_bigrams_no_characters,
aes(label = bigram, size = n, color = color_group)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20, trans = power_trans(1/.7)) +
scale_color_manual(values = c("group1" = "#c8775d",
"group2" = "#866042",
"group3" = "#bd701e")) +
theme_minimal()
# For Catriona
catriona_bigrams_no_characters <- head(bigrams_catriona_without_characters, 50) %>%
mutate(color_group = rep(c("group1", "group2", "group3"), length.out = n()))
catriona_bigrams_no_characters_wordcloud <- ggplot(catriona_bigrams_no_characters,
aes(label = bigram, size = n, color = color_group)) +  # the value 3 is the number of colors used in the wordcloud
geom_text_wordcloud() +
scale_size_area(max_size = 10, trans = power_trans(1/.7)) +
scale_color_manual(values = c("group1" = "#657b9e",
"group2" = "#5e93cf",
"group3" = "#223692")) +
theme_minimal()
ggsave("visualisations/catriona_no_characters_wordcloud.eps", plot = catriona_no_characters_wordcloud, width = 5, height = 4.5, dpi = 300)
ggsave("visualisations/treasure_island_bigrams_wordcloud.eps", plot = treasure_island_bigrams_wordcloud, width = 5, height = 4.5, dpi = 300)
ggsave("visualisations/catriona_no_characters_wordcloud.eps", plot = catriona_no_characters_wordcloud, width = 5, height = 5, dpi = 300)
ggsave("visualisations/catriona_no_characters_wordcloud.eps", plot = catriona_no_characters_wordcloud, width = 5, height = 6, dpi = 300)
ggsave("visualisations/treasure_island_bigrams_wordcloud.eps", plot = treasure_island_bigrams_wordcloud, width = 5, height = 4.5, dpi = 300)
ggsave("visualisations/treasure_island_bigrams_wordcloud.eps", plot = treasure_island_bigrams_wordcloud, width = 5, height = 5, dpi = 300)
ggsave("visualisations/treasure_island_bigrams_wordcloud.eps", plot = treasure_island_bigrams_wordcloud, width = 5, height = 6, dpi = 300)
ggsave("visualisations/catriona_bigrams_wordcloud.eps", plot = catriona_bigrams_wordcloud, width = 5, height = 4.5, dpi = 300)
ggsave("visualisations/treasure_island_bigrams_no_characters_wordcloud.eps", plot = treasure_island_bigrams_no_characters_wordcloud, width = 5, height = 4.5, dpi = 300)
ggsave("visualisations/treasure_island_bigrams_no_characters_wordcloud.eps", plot = treasure_island_bigrams_no_characters_wordcloud, width = 5, height = 5, dpi = 300)
ggsave("visualisations/treasure_island_bigrams_no_characters_wordcloud.eps", plot = treasure_island_bigrams_no_characters_wordcloud, width = 5, height = 6, dpi = 300)
ggsave("visualisations/catriona_bigrams_no_characters_wordcloud.eps", plot = catriona_bigrams_no_characters_wordcloud, width = 5, height = 4.5, dpi = 300)
ggsave("visualisations/treasure_island_bigrams_no_characters_wordcloud.eps", plot = treasure_island_bigrams_no_characters_wordcloud, width = 5, height = 6, dpi = 300)
ggsave("visualisations/treasure_island_bigrams_no_characters_wordcloud.eps", plot = treasure_island_bigrams_no_characters_wordcloud, width = 5.5, height = 6, dpi = 300)
ggsave("visualisations/treasure_island_bigrams_no_characters_wordcloud.eps", plot = treasure_island_bigrams_no_characters_wordcloud, width = 6, height = 6, dpi = 300)
ggsave("visualisations/treasure_island_bigrams_no_characters_wordcloud.eps", plot = treasure_island_bigrams_no_characters_wordcloud, width = 7, height = 6, dpi = 300)
# Catriona unigrams wordcloud
catriona_wordcloud <- ggplot(head(catriona_unigram_top, 50), aes(label = word, size = n, color = color_group)) +  # the value 3 is the number of colors used in the wordcloud
geom_text_wordcloud() +
scale_size_area(max_size = 20, trans = power_trans(1/.7)) +
scale_color_manual(values = c("group1" = "#657b9e",
"group2" = "#5e93cf",
"group3" = "#223692")) +
theme_minimal()
catriona_wordcloud
ggsave("visualisations/catriona_wordcloud.eps", plot = catriona_wordcloud, width = 5, height = 4.5, dpi = 300)
ggsave("visualisations/catriona_wordcloud.eps", plot = catriona_wordcloud, width = 5, height = 5, dpi = 300)
ggsave("visualisations/catriona_wordcloud.eps", plot = catriona_wordcloud, width = 5, height = 5.5, dpi = 300)
View(cleaned_set)
View(stopwords_removed_set)
ggsave("visualisations/catriona_wordcloud.eps", plot = catriona_wordcloud, width = 5.5, height = 5.5, dpi = 300)
ggsave("visualisations/treasure_island_wordcloud.eps", plot = treasure_island_wordcloud, width = 4.5, height = 4.5, dpi = 300)
ggsave("visualisations/treasure_island_no_characters_wordcloud.eps", plot = treasure_island_no_characters_wordcloud, width = 4.5, height = 4.5, dpi = 300)
ggsave("visualisations/catriona_no_characters_wordcloud.eps", plot = catriona_no_characters_wordcloud, width = 6, height = 6, dpi = 300)
ggsave("visualisations/treasure_island_bigrams_wordcloud.eps", plot = treasure_island_bigrams_wordcloud, width = 6, height = 6, dpi = 300)
ggsave("visualisations/catriona_bigrams_wordcloud.eps", plot = catriona_bigrams_wordcloud, width = 4.5, height = 4.5, dpi = 300)
ggsave("visualisations/catriona_bigrams_wordcloud.eps", plot = catriona_bigrams_wordcloud, width = 5, height = 5, dpi = 300)
scottish_english_words_visualisations <- ggplot(head(scottish_english_detection,25), aes(x = reorder(word, total_count), y = total_count, fill = book)) +
geom_bar(stat = "identity") +
coord_flip() +
facet_wrap(~book, scales = "free_y") + # creates separate plots for each book
theme_minimal() +
labs(title = "Word Counts for Each Book", x = "Words", y = "Total Count") +
theme(legend.position = "none") +
theme(
plot.title = element_text(size = 9),
axis.title = element_text(size = 9),
axis.text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8)
) +
scale_fill_manual(values = c("Catriona" = "#657b9e", "Treasure Island" = "#c8775d"))
scottish_english_words_visualisations
scottish_english_words_visualisations <- ggplot(head(scottish_english_detection,25), aes(x = reorder(word, total_count), y = total_count, fill = book)) +
geom_bar(stat = "identity", width = 0.3) +
coord_flip() +
facet_wrap(~book, scales = "free_y") + # creates separate plots for each book
theme_minimal() +
labs(title = "Word Counts for Each Book", x = "Words", y = "Total Count") +
theme(legend.position = "none") +
theme(
plot.title = element_text(size = 9),
axis.title = element_text(size = 9),
axis.text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8)
) +
scale_fill_manual(values = c("Catriona" = "#657b9e", "Treasure Island" = "#c8775d"))
scottish_english_words_visualisations
scottish_english_words_visualisations <- ggplot(head(scottish_english_detection,25), aes(x = reorder(word, total_count), y = total_count, fill = book)) +
geom_bar(stat = "identity",) +
coord_flip() +
facet_wrap(~book, scales = "free_y") + # creates separate plots for each book
theme_minimal() +
labs(title = "Word Counts for Each Book", x = "Words", y = "Total Count") +
theme(legend.position = "none") +
theme(
plot.title = element_text(size = 9),
axis.title = element_text(size = 9),
axis.text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8)
) +
scale_fill_manual(values = c("Catriona" = "#657b9e", "Treasure Island" = "#c8775d"))
scottish_english_words_visualisations
scottish_english_words_visualisations <- ggplot(head(scottish_english_detection,25), aes(x = reorder(word, total_count), y = total_count, fill = book)) +
geom_bar(stat = "identity",) +
coord_flip() +
facet_wrap(~book, scales = "free_y") + # creates separate plots for each book
theme_minimal() +
labs(title = "Word counts for each book", x = "Words", y = "Total count") +
theme(legend.position = "none") +
theme(
plot.title = element_text(size = 9),
axis.title = element_text(size = 9),
axis.text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8)
) +
scale_fill_manual(values = c("Catriona" = "#657b9e", "Treasure Island" = "#c8775d"))
scottish_english_words_visualisations
ggsave("visualisations/scottish_english_words_visualisations.eps", plot = scottish_english_words_visualisations, width = 4, height = 4, dpi = 300)
common_scottish_english_words_visualisation <- ggplot(word_summary, aes(x = reorder(word, count), y = count, fill = book)) +
geom_bar(stat = "identity") +
coord_flip() +
theme_minimal() +
labs(title = "Total Count of Each Common Word by Book", x = "Words", y = "Total Count") +
theme(legend.title = element_blank()) +
theme(
plot.title = element_text(size = 9),
axis.title = element_text(size = 9),
axis.text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8)
) +
scale_fill_manual(values = c("Catriona" = "#657b9e", "Treasure Island" = "#c8775d"))
common_scottish_english_words_visualisation
common_scottish_english_words_visualisation <- ggplot(word_summary, aes(x = reorder(word, count), y = count, fill = book)) +
geom_bar(stat = "identity") +
coord_flip() +
theme_minimal() +
labs(title = "Total count of each common word by book", x = "Words", y = "Total count") +
theme(legend.title = element_blank()) +
theme(
plot.title = element_text(size = 9),
axis.title = element_text(size = 9),
axis.text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8)
) +
scale_fill_manual(values = c("Catriona" = "#657b9e", "Treasure Island" = "#c8775d"))
common_scottish_english_words_visualisation
ggsave("visualisations/common_scottish_english_words_visualisation.eps", plot = common_scottish_english_words_visualisation, width = 4, height = 4, dpi = 300)
scottish_english_words_visualisations <- ggplot(head(scottish_english_detection,25), aes(x = reorder(word, total_count), y = total_count, fill = book)) +
geom_bar(stat = "identity") +
coord_flip() +
facet_wrap(~book, scales = "free_y") + # creates separate plots for each book
theme_minimal() +
labs(title = "Word counts for each book", x = "Words", y = "Total count") +
theme(legend.position = "none") +
theme(
plot.title = element_text(size = 9),
axis.title = element_text(size = 9),
axis.text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8)
) +
scale_fill_manual(values = c("Catriona" = "#657b9e", "Treasure Island" = "#c8775d"))
scottish_english_words_visualisations
ggsave("visualisations/scottish_english_words_visualisations.eps", plot = scottish_english_words_visualisations, width = 5, height = 5, dpi = 300)
ggsave("visualisations/common_scottish_english_words_visualisation.eps", plot = common_scottish_english_words_visualisation, width = 5, height = 5, dpi = 300)
ggsave("visualisations/unigrams_tf_idf_visualisation.eps", plot = unigrams_tf_idf_visualisation, width = 6, height = 7, dpi = 300)
ggsave("visualisations/unigrams_tf_idf_without_characters_visualisation.eps", plot = unigrams_tf_idf_without_characters_visualisation, width = 6, height = 7, dpi = 300)
ggsave("visualisations/bigrams_tf_idf_visualisation.eps", plot = bigrams_tf_idf_visualisation, width = 6, height = 7, dpi = 300)
ggsave("visualisations/bigrams_tf_idf_without_characters_visualisation.eps", plot = bigrams_tf_idf_without_characters_visualisation, width = 6, height = 7, dpi = 300)
ggsave("visualisations/book_wise_topicmodeling_number_of_topics.jpg", plot = book_wise_topicmodeling_number_of_topics, width = 5, height = 5, dpi = 300)
ggsave("visualisations/part_wise_topicmodeling_number_of_topics.jpg", plot = part_wise_topicmodeling_number_of_topics, width = 5, height = 5, dpi = 300)
book_wise_topicmodeling_number_of_topics
## Topic modelling ----
# Topic modelling by book
# Calculating the dtm matrix
books_dtm <- unigrams %>%  # this data is after stopwords removal and after lemmatization
cast_dtm(book, word,n)    #cast_dtm creates a document-term matrix from the dataset, each row is book, column represents word, n = frequency of each word in each book
# Finding optimal topic number
values_for_books <- FindTopicsNumber(       # determine optimal number of topics for LDA model
books_dtm,
topics = seq(1, 15, by = 1),
metrics = c("Griffiths2004", "CaoJuan2009","Arun2010","Deveaud2014"),
method = "Gibbs",
control = list(),
mc.cores = NA,
return_models = FALSE,
verbose = FALSE,
libpath = NULL
)
book_wise_topicmodeling_number_of_topics <- FindTopicsNumber_plot(values_for_books)
book_wise_topicmodeling_number_of_topics
book_wise_topicmodeling_number_of_topics <- FindTopicsNumber_plot(values_for_books)
jpeg("visualisations/book_wise_topicmodeling_number_of_topics.jpg", width = 5, height = 5, dpi = 300)
jpeg("visualisations/book_wise_topicmodeling_number_of_topics.jpg", width = 5, height = 5)
postscript("visualisations/book_wise_topicmodeling_number_of_topics.eps", plot = book_wise_topicmodeling_number_of_topics, width = 5, height = 5, horizontal = FALSE, onefile = FALSE, paper = "special")
postscript("visualisations/book_wise_topicmodeling_number_of_topics.eps", width = 5, height = 5, horizontal = FALSE, onefile = FALSE, paper = "special")
postscript("visualisations/part_wise_topicmodeling_number_of_topics.eps", width = 5, height = 5, horizontal = FALSE, onefile = FALSE, paper = "special")
pdf("visualisations/book_wise_topicmodeling_number_of_topics.eps", width = 5, height = 5, horizontal = FALSE, onefile = FALSE, paper = "special")
pdf("visualisations/book_wise_topicmodeling_number_of_topics.eps", width = 5, height = 5, onefile = FALSE, paper = "special")
pdf("visualisations/book_wise_topicmodeling_number_of_topics.pdf", width = 5, height = 5, onefile = FALSE, paper = "special")
pdf("visualisations/book_wise_topicmodeling_number_of_topics.pdf", width = 5, height = 5, onefile = FALSE, paper = "special")
pdf("visualisations/book_wise_topicmodeling_number_of_topics.pdf", width = 5, height = 5)
FindTopicsNumber_plot(values_for_books)
dev.off()
# Topic modelling by parts (total parts of both the books)
books_words <- cleaned_set %>%
unnest_tokens(word, text) %>%
anti_join(final_stopwords_set) %>%
count(part, word, book, sort = TRUE)
# Calculating the dtm matrix
book_dtm <- books_words %>%
cast_dtm(part, word, n)
# Finding optimal topic number
values_for_parts <- FindTopicsNumber(
book_dtm,
topics = seq(1, 15, by = 1),
metrics = c("Griffiths2004", "CaoJuan2009","Arun2010","Deveaud2014"),
method = "Gibbs",
control = list(),
mc.cores = NA,
return_models = FALSE,
verbose = FALSE,
libpath = NULL
)
part_wise_topicmodeling_number_of_topics <- FindTopicsNumber_plot(values_for_parts)
part_wise_topicmodeling_number_of_topics
postscript("visualisations/book_wise_topicmodeling_number_of_topics.eps", width = 5, height = 5, horizontal = FALSE, onefile = FALSE, paper = "special")
FindTopicsNumber_plot(values_for_books)
dev.off()
postscript("visualisations/part_wise_topicmodeling_number_of_topics.eps", width = 5, height = 5, horizontal = FALSE, onefile = FALSE, paper = "special")
FindTopicsNumber_plot(values_for_parts)
dev.off()
book_topic_gamma %>%
ggplot(aes(x = factor(topic), y = gamma, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ document) +
labs(title = "Topic Proportions per Book",
x = "Topic", y = "Proportion") +
theme_minimal()
book_topic_gamma <- tidy(books_lda, matrix = "gamma")
book_topic_gamma %>%
ggplot(aes(x = factor(topic), y = gamma, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ document) +
labs(title = "Topic Proportions per Book",
x = "Topic", y = "Proportion") +
theme_minimal()
book_topic_gamma %>%
ggplot(aes(x = document, y = gamma, fill = factor(topic))) +
geom_col(position = "fill") +
labs(title = "Proportion of Topics in Each Book",
x = "Book", y = "Topic Proportion", fill = "Topic") +
theme_minimal()
book_topic_gamma %>%
ggplot(aes(x = document, y = gamma, fill = factor(topic))) +
geom_col(position = "fill") +
labs(title = "Proportion of Topics in Each Book",
x = "Book", y = "Topic Proportion", fill = "Topic") +
theme_minimal()
book_topic_gamma <- tidy(books_lda, matrix = "gamma")   # gamma = topic proportion per document
book_topic_distribution <- book_gamma %>%
pivot_wider(names_from = topic, values_from = gamma)
book_topic_distribution <- book_topic_gamma %>%
pivot_wider(names_from = topic, values_from = gamma)
book_topic_distribution
book_topic_gamma
book_topic_gamma$document <- factor(book_gamma$document,
levels = unique(book_gamma$document),
labels = c("Treasure Island", "Catriona"))
book_topic_gamma$document <- factor(book_topic_gamma$document,
levels = unique(book_gamma$document),
labels = c("Treasure Island", "Catriona"))
# Create the stacked bar chart
ggplot(book_topic_gamma, aes(x = document, y = gamma, fill = factor(topic))) +
geom_bar(stat = "identity") +
labs(
title = "Topic Proportions by Book",
x = "Book",
y = "Topic Proportion",
fill = "Topic"
) +
theme_minimal() +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
theme(text = element_text(size = 12))
book_topic_gamma$document <- factor(book_topic_gamma$document,
levels = unique(book_topic_gamma$document),
labels = c("Treasure Island", "Catriona"))
# Create the stacked bar chart
ggplot(book_topic_gamma, aes(x = document, y = gamma, fill = factor(topic))) +
geom_bar(stat = "identity") +
labs(
title = "Topic Proportions by Book",
x = "Book",
y = "Topic Proportion",
fill = "Topic"
) +
theme_minimal() +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
theme(text = element_text(size = 12))
book_topic_gamma %>%
ggplot(aes(x = document, y = gamma, fill = factor(topic))) +
geom_col(position = "fill") +
labs(title = "Proportion of topics in each book",
x = "Book", y = "Topic proportion", fill = "Topic") +
theme_minimal()
